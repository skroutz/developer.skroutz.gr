---
title: Authorization Flows
---

# Supported Authorization Flows

* toc
{:toc}

## Server-side web applications

This flow is designed for web applications that can store `tokens` and maintain
`state`. For a detailed description read the
[specification](http://tools.ietf.org/html/draft-ietf-oauth-v2-16#section-4.1).

Î¤he required authorization access tokens are generated in two steps.

Your application should redirect user to <%= settings.site_name %>
to authorize access to his data. After authorization access for your application
is granted by user, <%= settings.site_name %> will send an
`authorization_code` to your application. Use that `authorization_code` to
generate the `access_token`, which will expire after one hour. Also, use that
`authorization_code` to generate a `refresh_token` and create new tokens after
the expiration of the existing.

The examples of this document will use the following `client_id` and
`client_secret` pair of keys:

~~~ yaml
client_id:      1234567
client_secret:  ABCD
~~~

## Generate `access_token`

First, redirect your Users to
`https://www.<%= settings.domain %>/oauth2/authorizarions/new`
with the required parameters:

* your application's `client_id`
* the `redirect_uri` to receive the response. This **must** be the same with the
  one you declared at your application registration.

To use that flow, the `response_type=code` parameter is required. For example:

<pre class="terminal">
GET https://www.<%= settings.domain %>/oauth2/authorizations/new

Parameters
  client_id: 1234567
  redirect_uri: https://your.site.com/callback
  response_type: code
</pre>


Example:

<pre class="terminal">
GET https://www.<%= settings.domain %>/oauth2/authorizations/new?
      client_id=1234567&
      redirect_uri=https://your.site.com/callback&
      response_type=code
</pre>

Then, the user will authenticate and authorize access, or not, to his data for
your application.
If the user grant access, we will redirect him at:

<pre class="terminal">
https://your.site.com/callback?code=aCoDE
</pre>

Otherwise, we will redirect him at:

<pre class="terminal">
https://your.site.com/callback?error=access_denied
</pre>

If the user authorize access, then you will receive the `authorization_code`, as
`code`, to access his data. In case of access denial, it is recommended to
redirect user to your registration form or proceed to checkout.

Thereafter, your application should use the `authorization_code` to generate an
`access_token` and a `refresh_token`. This, can be done with the following API
call:

<pre class="terminal">
POST https://www.<%= settings.domain %>/oauth2/token

Parameters
  client_id: 1234567
  client_secret: ABCD
  redirect_uri: https://your.site.com/callback
  code: aCoDE
  grant_type: authorization_code
</pre>

For example, the request could be:

<pre class="terminal">
POST /oauth2/token HTTP/1.1
Host: www.<%= settings.domain %>
Content-Type: application/x-www-form-urlencoded

client_id=1234567&
client_secret=ABCD&
redirect_uri=https://your.site.com/callback&
code=aCoDE&
grant_type=authorization_code
</pre>

<%= settings.site_name %> will respond to you with the two tokens
in JSON format and the `access_token` TTL (Time To Live) in seconds.

~~~ javascript
{
  "access_token": "124fFAGRNJru1FTz70BzhT3Zg...",
  "refresh_token": "1236BMfW9j53gdGImsixUH6kU5...",
  "expires_in": 3600
}
~~~

> By default, `access_token` expires in **1 hour** (3600 seconds).

## Consume `access_token`

Use the `access_token` to access a users' private data. For example:

<pre class="terminal">
curl https://www.<%= settings.domain %>/oauth2/address?oauth_token=124fFAGRNJru1FTz70BzhT3Zg...
</pre>

A list of all the <%= settings.site_name %> OAuth 2.0 API endpoints
can be found at <%= link_to 'OAuth Endpoints', '/oauthdoc/endpoints' %>

## Renew `access_token`

Any API call with an expired `access_token` receives an HTTP `401 Unauthorized`
response.

To create a new `access_token` a POST request with the `refresh_token` is
required. For example:  

<pre class="terminal">
POST /oauth2/token HTTP/1.1
Host: www.<%= settings.domain %>
Content-Type: application/x-www-form-urlencoded

client_id=1234567&
client_secret=ABCD&
refresh_token=1236BMfW9j53gdGImsixUH6kU5...&
grant_type=refresh_token
</pre>
